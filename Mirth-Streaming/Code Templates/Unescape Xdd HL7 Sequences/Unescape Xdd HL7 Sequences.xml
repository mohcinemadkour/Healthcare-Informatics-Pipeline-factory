<codeTemplate version="3.6.0">
  <id>9d3f1dd9-d28e-42e5-89bd-8a3569b33b69</id>
  <name>Unescape \Xdd..\ HL7 Sequences</name>
  <revision>1</revision>
  <lastModified>
    <time>1528477569887</time>
    <timezone>GMT</timezone>
  </lastModified>
  <contextSet>
    <delegate>
      <contextType>GLOBAL_UNDEPLOY</contextType>
      <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
      <contextType>GLOBAL_POSTPROCESSOR</contextType>
      <contextType>CHANNEL_PREPROCESSOR</contextType>
      <contextType>CHANNEL_ATTACHMENT</contextType>
      <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
      <contextType>CHANNEL_BATCH</contextType>
      <contextType>SOURCE_RECEIVER</contextType>
      <contextType>CHANNEL_POSTPROCESSOR</contextType>
      <contextType>GLOBAL_DEPLOY</contextType>
      <contextType>GLOBAL_PREPROCESSOR</contextType>
      <contextType>CHANNEL_DEPLOY</contextType>
      <contextType>CHANNEL_UNDEPLOY</contextType>
      <contextType>DESTINATION_DISPATCHER</contextType>
      <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
    </delegate>
  </contextSet>
  <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
    <type>FUNCTION</type>
    <code>/**
	Replaces any \Xdd..\ HL7 escape sequences with the corresponding character(s).

	@param {XML} node - The node to recursively iterate through.
	@param {String} charset - The character encoding set to use when converting bytes to Unicode code
		points. If not specified, US-ASCII will be used.
	@param {String} encodingCharacters - The HL7 encoding characters to exclude from the replacement.
*/
function unescapeXSequences(node, charset, encodingCharacters) {
	if (!charset) {
		charset = &apos;US-ASCII&apos;;
	}

	if (!encodingCharacters) {
		encodingCharacters = node.MSH[&apos;MSH.1&apos;].toString().split(&apos;&apos;).concat(node.MSH[&apos;MSH.2&apos;].toString().split(&apos;&apos;));
		if (encodingCharacters.length == 0) {
			encodingCharacters = [&apos;|&apos;, &apos;^&apos;, &apos;~&apos;, &apos;\\&apos;, &apos;&amp;&apos;];
		}
	}

	for each (child in node.children()) {
		if (child.hasComplexContent()) {
			unescapeXSequences(child, charset, encodingCharacters);
		} else if (!/MSH\.[12]/.test(child.name())) {
			var childString = child.toString();
			var matched = false;

			for each (match in childString.match(/\\X([\dA-F]{2})+\\/ig)) {
				matched = true;
				var hexString = match.substr(2, match.length-3);
				var buffer = java.nio.ByteBuffer.allocate(hexString.length / 2);

				while (hexString.length &gt; 0) {
					var intValue = new java.lang.Integer((java.lang.Character.digit(hexString.substr(0,1), 16) &lt;&lt; 4) + java.lang.Character.digit(hexString.substr(1,1), 16));
					buffer.put(intValue.byteValue());
					hexString = hexString.substr(2);
				}

				childString = childString.replace(match, new java.lang.String(buffer.array(), charset));
			}

			if (matched) {
				if (encodingCharacters.length &gt; 3) {
					childString = childString.replace(encodingCharacters[3], &apos;\\E\\&apos;);
				}
				if (encodingCharacters.length &gt; 0) {
					childString = childString.replace(encodingCharacters[0], &apos;\\F\\&apos;);
				}
				if (encodingCharacters.length &gt; 1) {
					childString = childString.replace(encodingCharacters[1], &apos;\\S\\&apos;);
				}
				if (encodingCharacters.length &gt; 2) {
					childString = childString.replace(encodingCharacters[2], &apos;\\R\\&apos;);
				}
				if (encodingCharacters.length &gt; 4) {
					childString = childString.replace(encodingCharacters[4], &apos;\\T\\&apos;);
				}

				node.children()[child.childIndex()] = &lt;{child.name()}&gt;{childString}&lt;/{child.name()}&gt;;
			}
		}
	}
}</code>
  </properties>
</codeTemplate>